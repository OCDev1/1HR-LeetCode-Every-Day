# Remove n-th Node From End of Linked List
# O(size of list) but better than the naive solution which is also O(size of list)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        res = left = head
        right = head

        for i in range(n):
            right = right.next
        prev = None
        while right:
            prev = left
            left = left.next
            right = right.next
        if prev:
            prev.next = left.next
        else:
            return res.next

        return res

# still O(size of list) but less efficient:

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        res = head
        size = 1
        
        # find list size
        while head.next is not None:
            size += 1
            head=head.next
        head = res
        prev = None

        # reaching correct node
        for i in range(size-n):
            prev = head
            head = head.next
        # the removal itself
        if prev:
            prev.next = head.next
        else:   # when removing first node
            return head.next

        return res
