# House Robber
# O(n) time, O(1) space
class Solution:
    def rob(self, nums: List[int]) -> int:
        one, two = 0, 0 # save last 2 values (they're the only ones we need each iteration)

        for i in range(len(nums)):
            temp = max(two, one + nums[i])
            one = two
            two = temp
        
        return max(one, two)

# O(n) time and space
class Solution:
    def rob(self, nums: List[int]) -> int:
        arr = [0] * (len(nums) + 2) # first 2 cells are 0 - base case

        for i in range(2, len(arr)):
            arr[i] = max(arr[i-1], arr[i-2] + nums[i-2])
        
        return arr[-1]
