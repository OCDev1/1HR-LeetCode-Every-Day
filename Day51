# Subtree of a Binary Tree
# O(n*m) time, O(n+m) space
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:   
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not subRoot:
            return True
        if not root:
            return False
        
        if self.sameTree(root,subRoot):
            return True
        
        return (self.isSubtree(root.right, subRoot) or self.isSubtree(root.left, subRoot))       
       
    def sameTree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if not root and not subRoot:
            return True
        if root and subRoot and root.val == subRoot.val:
            return (self.sameTree(root.left, subRoot.left) and self.sameTree(root.right, subRoot.right))
        return False   

        

# solution with serialization and pattern matching
# O(n+m) time, O(n+m) space
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        # Serialize both trees
        root_str = self.serialize(root)
        subRoot_str = self.serialize(subRoot)
        
        # Check if subRoot's serialization is a substring of root's serialization
        return subRoot_str in root_str
    
    def serialize(self, root: Optional[TreeNode]) -> str:
        """Serialize the tree using preorder traversal with markers for null nodes."""
        serialized = []
        
        def preorder(node):
            if not node:
                serialized.append("#")  # Marker for None
                return
            serialized.append(f",{node.val}")  # Add comma to separate nodes
            preorder(node.left)
            preorder(node.right)
        
        preorder(root)
        return "".join(serialized)
