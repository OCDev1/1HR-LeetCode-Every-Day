# Contains duplicate (O(n)):
class Solution:
    def hasDuplicate(self, nums: List[int]) -> bool:
        myset = set()
        for num in nums:
            if num in myset:
                return True 
            else:
                myset.add(num)
        
        return False

# Two integer sum (both are O(n)):
# my solution:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        mydict = defaultdict(set)
        for i,num in enumerate(nums): 
            if num not in mydict:
                mydict[num] = []
            mydict[num].append(i)
        
        for j in range(len(nums)):
            comp = (target - nums[j])
            if comp in mydict:
                if comp == nums[j]:
                    if len(mydict[comp]) > 1:    #make sure youre not taking the same number twice
                        return [j , mydict[comp][1]]
                else:
                    return [j , mydict[comp][0]]
                     


# more elegant solution:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        mymap = {}

        for i,num in enumerate(nums):
            comp = target - num    #comp = complement
            if comp in mymap:   #if the difference is in the map return the index of it and current index
                return [mymap[comp], i]
            mymap[num] = i    #if not then add the current number to the hashmap and continue
                     
