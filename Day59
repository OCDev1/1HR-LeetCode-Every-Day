# Serialize and Deserialize Binary Tree
# O(n) time and space
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Codec:
    
    # Encodes a tree to a single string.
    def serialize(self, root: Optional[TreeNode]) -> str:
        res = []

        def dfs(root1):
            if not root1:
                res.append("n")
                return
            res.append(str(root1.val))
            dfs(root1.left)
            dfs(root1.right)
        dfs(root)
        return "#".join(res)

        
    # Decodes your encoded data to tree.
    def deserialize(self, data: str) -> Optional[TreeNode]:
        vals = data.split("#")
        self.i = 0

        def dfs():
            if vals[self.i] == "n":
                self.i += 1
                return None
            node = TreeNode(int(vals[self.i]))
            self.i += 1
            node.left = dfs()
            node.right = dfs()
            return node
        return dfs()






