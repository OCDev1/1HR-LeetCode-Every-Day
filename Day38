# Reverse a Linked List
# O(n)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:
            return None
        prev = None
        cur_node = head

        while cur_node.next:
            next_node = cur_node.next
            cur_node.next = prev
            prev = cur_node
            cur_node = next_node

        cur_node.next = prev

        return cur_node

# Merge Two Sorted Linked Lists
# O(n)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        res = head = None

        if not list1:
            return list2
        if not list2:
            return list1

        if list1.val <= list2.val:
            res = list1
            head = list1
            list1 = list1.next
        else:
            res = list2
            head = list2
            list2 = list2.next

        while list1 and list2:
            if list1.val <= list2.val:
                head.next = list1
                list1 = list1.next
            else:
                head.next = list2
                list2 = list2.next
            head = head.next
        
        if list1:
            head.next = list1
        else:
            head.next = list2
        
        return res
