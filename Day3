2 problems today:

# merge 2 sorted lists:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        res = None  #pointer to head
        curr = None #pointer to current

        # empty list
        if not list1:
            return list2
        elif not list2:
            return list1

        # assigning the head of result
        if list1.val > list2.val:
            res = list2
            list2 = list2.next
            curr = res
        else:
            res = list1
            list1 = list1.next
            curr = res
        
        # ACTUAL MERGING
        while list1 != None and list2 != None:
            if list1.val > list2.val:
                curr.next = list2
                curr = curr.next
                list2 = list2.next
            else:
                curr.next = list1
                curr = curr.next
                list1 = list1.next
        
        if not list1 and not list2:
            return res

        elif not list1:
                curr.next = list2
        elif not list2:
                curr.next = list1

        return res
    
# Reorder list:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        

        # splitting list into 2 lists
        slow, fast = head, head.next
        while fast != None and fast.next != None:
            slow = slow.next
            fast = fast.next.next
        # slow.next is now the head of 2nd list
        head2 = slow.next
        slow.next = None

        #reversing second list
        prev = None       
        while head2:
            temp = head2.next
            head2.next = prev
            prev = head2
            head2 = temp
        
        #merge lists
        p1 = head
        p2 = prev
        cur = head
        while p2:
            tmp1,tmp2 = p1.next, p2.next
            p1.next = p2
            p2.next = tmp1
            p1, p2 = tmp1, tmp2
        





