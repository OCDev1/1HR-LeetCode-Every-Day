# Longest substring without duplicates
# O(n):    
# observation: we shrink the left border of the window to the first letter after the duplicate (the first of the two) and continue from there
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int: 
        if len(s) == 0:
            return 0

        myset = set()   # to check for duplicates
        l,r=0,1
        ans = 1     # min substring length

        myset.add(s[l])
        while r < len(s):
            if s[r] in myset:
                # moving to the next window
                myset.remove(s[l])
                l += 1

            else:
                myset.add(s[r])
                ans = max(ans, r-l+1)
                r+=1
        return ans


# O(n^2):
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0:
            return 0

        myset = set()   # to check for duplicates
        l,r=0,1
        ans = 1     # min substring length

        while r < len(s):
            myset.add(s[l])

            if s[r] in myset:
                ans = max(ans, r-l)
                # moving to the next window
                l+=1
                r = l+1
                # empty hash set
                myset = set()
            else:
                myset.add(s[r])
                ans = max(ans, r-l+1)
                r+=1

        return ans
