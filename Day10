# missing number:
class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        myset = set()
        for i in range(len(nums)):
            myset.add(nums[i])
        
        for i in range(len(nums)+1):
            if i not in myset:
                return i
            

# sum of two integers without +/- operators:
class Solution:
    def getSum(self, a: int, b: int) -> int:
        arr = [a, b]
        return sum(arr)


# K-th smallest element in a binary search tree:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        # recursive solution:
        arr = []

        def in_order(root: Optional[TreeNode]) -> None:
            if root.left:
                in_order(root.left)

            arr.append(root.val)

            if root.right:
                in_order(root.right)    
        
        in_order(root)
        print(arr)
        return arr[k-1]

        # iterative solution:
        stack = []
        cur = root

        while stack or cur:
            while cur:
                stack.append(cur)
                cur = cur.left
            cur = stack.pop()
            k-=1
            if k == 0:
                return cur.val
            cur = cur.right


