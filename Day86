# Graph Valid Tree
# O(V+E)
class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        edge_map = { i : [] for i in range(n)}  # set up map
        for a,b in edges:
            edge_map[a].append(b)
            edge_map[b].append(a)   # because it's an undirected graph
        
        cycle = set()
        visited = set()
        used_edges = set()

        def dfs(node):
            if node in cycle:   # we have a cycle-not a tree
                return False
            if node in visited:     # we already checked here and this node isn't in a cycle
                return True
            
            visited.add(node)   # mark as visited
            cycle.add(node)     # add for future cycle checks in this path

            for child in edge_map[node]:    # continue the check for children
                if (node, child) not in used_edges and (child, node) not in used_edges:     # we check both cases because it's undirected edges
                    used_edges.add((node,child))    # mark current edge as used
                    if not dfs(child):  
                        return False    # child is in a cycle-return false
                    cycle.remove(child)  # empty cycle set for the next path checks
            return True
        
        if not dfs(0):  # if there is a cycle-false
            return False
        if len(visited) != n:   # graph needs to be connected to be a tree so make sure we visited all nodes
            return False
        return True
            
            
OR

class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        edge_map = { i : [] for i in range(n)}  # set up map
        for a,b in edges:
            edge_map[a].append(b)
            edge_map[b].append(a)   # because it's an undirected graph
        
        visited = set()

        def dfs(node,prev):
            if node in visited:     # we already checked here and this node isn't in a cycle
                return False
            
            visited.add(node)   # mark as visited

            for child in edge_map[node]:    # continue the check for children
                if child != prev:     # we check both cases because it's undirected edges
                    if not dfs(child, node):  
                        return False    # child is in a cycle-return false
            return True
        
        if not dfs(0, -1):  # if there is a cycle-false
            return False
        if len(visited) != n:   # graph needs to be connected to be a tree so make sure we visited all nodes
            return False
        return True
            
            
